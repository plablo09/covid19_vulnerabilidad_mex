# AUTOGENERATED! DO NOT EDIT! File to edit: 02_vulnerabilidad_pca.ipynb (unless otherwise specified).

__all__ = ['get_pca_geodf', 'scale_vars', 'get_pca_columns', 'ajustar_pca', 'cargar_indices_vulnerabilidad']

# Cell
import pandas as pd
import geopandas as gpd
import numpy as np
import datetime

from .datos import *

from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn import preprocessing

# librerias para visualizacion
import seaborn as sns
import matplotlib.pyplot as plt

# librerias de sistema de archivos y busqueda
import os
import glob
import csv

# Cell

def get_pca_geodf(data, numeric_vars, n_components=3):
    x = scale_vars(data, numeric_vars)

    pca = PCA(n_components=n_components)
    principalComponents = pca.fit_transform(x)
    columns = get_pca_columns(pca)

    principalDataframe = pd.DataFrame(data = principalComponents, columns = columns)

    newDataframe = pd.concat([data, principalDataframe], axis = 1)
    return pca, newDataframe

# Cell

def scale_vars(data, numeric_vars):
    x = data[numeric_vars]
    x = StandardScaler().fit_transform(x)
    x = pd.DataFrame(x, columns=numeric_vars)

    return x

# Cell

def get_pca_columns(pca):

    columns = []
    for i in range(pca.n_components):
        columns.append(f'PC{i + 1}')

    return columns

# Cell

def ajustar_pca(municipios_df, caracteristicas, version=0):
    indicadores = ['densi', 'p_mayores', 'p_ni√±os_m', 'p_sin_derech',
                'num_hosp_pp', 'num_camas_pp', 'tasa_diabetes', 'tasa_cardiacas',
                'tasa_cancer', 'tasa_pulmonares']

    raise NotImplementedError('En construccion')


# Cell
def cargar_indices_vulnerabilidad(nombre_archivo, formato_largo=False):
    indicadores_municipal = leer_variables_municipales_std()

    df = pd.read_csv(nombre_archivo, dtype={'CLAVE_MUNICIPIO_RES': str})
    cols_pca = ['CLAVE_MUNICIPIO_RES', 'i_vuln_gen', 'i_vuln_salud',
             'i_vuln_infraestructura', 'i_vuln_cobertura']
    df = df[cols_pca]

    if formato_largo:
        df = df.melt(id_vars=['CLAVE_MUNICIPIO_RES'],
                         var_name='modelo', value_name='valor',
                         value_vars=['i_vuln_gen',
                                     'i_vuln_salud',
                                     'i_vuln_infraestructura',
                                     'i_vuln_cobertura'])

    indicadores_municipal = indicadores_municipal.merge(df, on='CLAVE_MUNICIPIO_RES', how='left')

    return indicadores_municipal